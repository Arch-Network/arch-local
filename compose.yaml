version: '3.8'

services:
  init:
    image: ghcr.io/arch-network/validator:latest
    command: 
      - /bin/bash
      - -c
      - |
        set -ex
        echo "Generating validator PeerIds..."
        rm -f /bootnode_data/validator_whitelist /bootnode_data/leader_peer_id
        echo "Replicas: ${REPLICA_COUNT}"
        
        echo "Leader PeerID: $$LEADER_PEER_ID"
        LEADER_PEER_ID=$(/validator -d /leader_data --generate-peer-id | tee -a /bootnode_data/validator_whitelist)
        echo "$$LEADER_PEER_ID" > /bootnode_data/leader_peer_id
        

        echo "Add Leader Peer ID to whitelist"
        echo "$$LEADER_PEER_ID" >> /bootnode_data/validator_whitelist

        for i in $(seq 1 ${REPLICA_COUNT}); do
          mkdir -p /arch_data/$$i
          /validator -d /arch_data/$$i --generate-peer-id | tee -a /bootnode_data/validator_whitelist;
        done
        sort -u -o /bootnode_data/validator_whitelist /bootnode_data/validator_whitelist
        echo "Generated validator whitelist:"
        cat /bootnode_data/validator_whitelist
    volumes:
      - ./validator_arch_data:/arch_data
      - ./leader_arch_data:/leader_data
      - ./bootnode_arch_data:/bootnode_data
    environment:
      - REPLICA_COUNT=${REPLICA_COUNT:-2}

  bootnode:
    image: ghcr.io/arch-network/bootnode:latest
    command: 
      - /bin/bash
      - -c
      - |
        set -ex
        while [ ! -f /arch_data/leader_peer_id ]; do
          echo "Waiting for leader_peer_id file..."
          sleep 1
        done
        WHITELIST=$(sort -u /arch_data/validator_whitelist | paste -sd "," -)
        LEADER_PEER_ID=$(cat /arch_data/leader_peer_id)
        echo "Validator Whitelist: $$WHITELIST"
        echo "Leader Peer ID: $$LEADER_PEER_ID"
        /bootnode -d /arch_data -n ${NETWORK_MODE:-localnet} --leader-peer-id "$$LEADER_PEER_ID" --validator-whitelist "$$WHITELIST"
    depends_on:
      init:
        condition: service_completed_successfully
    volumes:
      - ./bootnode_arch_data:/arch_data
    networks:
      arch:
        ipv4_address: 172.19.0.250
    environment:
      - NETWORK_MODE=${NETWORK_MODE:-localnet}

  leader:
    image: ghcr.io/arch-network/validator:latest
    depends_on:
      - bootnode
    command:
      - /bin/bash
      - -c
      - |
        set -ex
        while [ ! -f /bootnode_data/leader_peer_id ]; do
          echo "Waiting for leader_peer_id file..."
          sleep 1
        done
        LEADER_PEER_ID=$(cat /bootnode_data/leader_peer_id)
        echo "Leader Peer ID: $$LEADER_PEER_ID"
        # Get bootnode peer ID
        BOOTNODE_PEER_ID=$(cat /bootnode_data/peer_id)
        /validator -d /arch_data -n ${NETWORK_MODE:-localnet} -b "/ip4/172.19.0.250/tcp/19001/p2p/$$BOOTNODE_PEER_ID"
    volumes:
      - ./leader_arch_data:/arch_data
      - ./bootnode_arch_data:/bootnode_data:ro
    environment:
      - RUST_LOG=${RUST_LOG:-info,validator=debug}
      - RUSTC_LOG_COLOR=never
      - RPC_BIND_IP=0.0.0.0
      - RPC_BIND_PORT=9001
      - NETWORK_MODE=${NETWORK_MODE:-localnet}
    ports:
      - 9001:9001
    networks:
      - arch

  validator:
    image: ghcr.io/arch-network/validator:latest
    depends_on:
      - bootnode
    command:
      - /bin/bash
      - -c
      - |
        set -ex
        REPLICA_ID=$(($(hostname -i | cut -d "." -f4)-1))
        echo "Running Replica $REPLICA_ID"
        while [ ! -f /bootnode_data/leader_peer_id ]; do
          echo "Waiting for leader_peer_id file..."
          sleep 1
        done
        LEADER_PEER_ID=$(cat /bootnode_data/leader_peer_id)
        echo "Leader Peer ID: $LEADER_PEER_ID"
        /validator -d /arch_data/$$REPLICA_ID -n ${NETWORK_MODE:-localnet} -b "/ip4/172.19.0.250/tcp/19001/p2p/$(cat /bootnode_data/peer_id)"
    volumes:
      - ./validator_arch_data:/arch_data
      - ./bootnode_arch_data:/bootnode_data:ro
    environment:
      - RUST_LOG=${RUST_LOG:-info,validator=debug}
      - RUSTC_LOG_COLOR=never
      - NETWORK_MODE=${NETWORK_MODE:-localnet}
    deploy:
      mode: replicated
      replicas: ${REPLICA_COUNT:-2}
    networks:
      - arch

networks:
  arch:
    ipam:
      driver: default
      config:
        - subnet: 172.19.0.0/24
          gateway: 172.19.0.1